package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/taxio/gqlgen-ent-todo/ent"
	"github.com/taxio/gqlgen-ent-todo/graph"
	"github.com/taxio/gqlgen-ent-todo/graph/loader"
	"github.com/taxio/gqlgen-ent-todo/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.CreateTodoPayload, error) {
	_, userID, err := parseNodeID(input.UserID)
	if err != nil {
		return nil, err
	}
	user, err := r.db.User.Get(ctx, userID)
	if err != nil {
		return nil, err
	}
	todo, err := r.db.Todo.Create().SetContent(input.Content).SetOwner(user).Save(ctx)
	if err != nil {
		return nil, err
	}

	nodeID, err := encodeNodeId("Todo", todo.ID)
	if err != nil {
		return nil, err
	}
	return &model.CreateTodoPayload{
		Todo: &model.Todo{ID: nodeID, Content: todo.Content, Done: todo.Done},
	}, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.UpdateTodoInput) (*model.UpdateTodoPayload, error) {
	_, todoID, err := parseNodeID(input.ID)
	if err != nil {
		return nil, err
	}
	todo, err := r.db.Todo.UpdateOneID(todoID).SetContent(input.Content).SetDone(input.Done).Save(ctx)
	if err != nil {
		return nil, err
	}
	nodeID, err := encodeNodeId("Todo", todo.ID)
	return &model.UpdateTodoPayload{
		Todo: &model.Todo{ID: nodeID, Content: todo.Content, Done: todo.Done},
	}, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	_, todoID, err := parseNodeID(id)
	if err != nil {
		return nil, err
	}
	todo, err := r.db.Todo.Get(ctx, todoID)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, nil
		}
		return nil, err
	}
	nodeID, err := encodeNodeId("Todo", todo.ID)
	return &model.Todo{
		ID:      nodeID,
		Content: todo.Content,
		Done:    todo.Done,
	}, nil
}

// Owner is the resolver for the owner field.
func (r *todoResolver) Owner(ctx context.Context, obj *model.Todo) (*model.User, error) {
	if obj == nil {
		return nil, fmt.Errorf("parent user is nil")
	}
	_, todoID, err := parseNodeID(obj.ID)
	if err != nil {
		return nil, err
	}
	owner, err := loader.GetOwner(ctx, todoID)
	if err != nil {
		return nil, err
	}
	nodeID, err := encodeNodeId("User", owner.ID)
	return &model.User{
		ID:   nodeID,
		Name: owner.Name,
	}, nil
}

// Todo returns graph.TodoResolver implementation.
func (r *Resolver) Todo() graph.TodoResolver { return &todoResolver{r} }

type todoResolver struct{ *Resolver }
