interface Node {
  id: ID!
}

interface Error {
  message: String!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type Todo implements Node {
  id: ID!
  content: String!
  done: Boolean!
  user: User!
}

type TodoEdge {
  node: Todo!
  cursor: String!
}

type TodoConnection {
  edges: [TodoEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type User implements Node {
  id: ID!
  name: String!

  todos(first: Int, after: String): TodoConnection!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  user(id: ID!): User!
  users(first: Int, after: String): UserConnection!
  todo(id: ID!): Todo!
  todos(first: Int, after: String): TodoConnection!
}

input CreateUserInput {
  name: String!
}

type CreateUserPayload {
  user: User!
  errors: [CreateUserError!]!
}

union CreateUserError = UsernameAlreadyExistsError

type UsernameAlreadyExistsError implements Error {
  message: String!
  name: String!
}

input CreateTodoInput {
  userId: ID!
  content: String!
}

type CreateTodoPayload {
  todo: Todo!
  errors: [CreateTodoError!]!
}

union CreateTodoError = UnknownUserError

type UnknownUserError implements Error {
  message: String!
  userId: ID!
}

input UpdateTodoInput {
  id: ID!
  content: String!
  done: Boolean!
}

type UpdateTodoPayload {
  todo: Todo!
  errors: [UpdateTodoError!]!
}

union UpdateTodoError = TodoNotFoundError

type TodoNotFoundError implements Error {
  message: String!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload!

  createTodo(input: CreateTodoInput!): CreateTodoPayload!
  updateTodo(input: UpdateTodoInput!): UpdateTodoPayload!
}
